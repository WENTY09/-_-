import os
import logging
from telebot import TeleBot
from user_data import (
    get_user_data,
    update_user_data,
    can_deliver,
    get_top_users,
    get_shop_items_count,
    get_shop_item,
    purchase_buff,
    get_active_buffs_info,
    is_bot_active,
    set_bot_state
)
from config import TELEGRAM_BOT_TOKEN, ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ config.py")

bot = TeleBot(TELEGRAM_BOT_TOKEN)

def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return str(user_id) in ADMIN_IDS

def check_bot_active(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    def wrapper(message, *args, **kwargs):
        if not is_bot_active() and not check_admin(message.from_user.id):
            bot.reply_to(message, "üîí –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        return func(message, *args, **kwargs)
    return wrapper

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
@check_bot_active
def start_command(message):
    user_data = get_user_data(message.from_user.id)
    bot.reply_to(
        message,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_data['username']}!\n\n"
        "üöö –Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

@bot.message_handler(commands=['help'])
@check_bot_active
def help_command(message):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/deliver - –°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/top - –¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤\n"
        "/shop - –ú–∞–≥–∞–∑–∏–Ω –±–∞—Ñ—Ñ–æ–≤\n"
        "/buffs - –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã"
    )
    if check_admin(message.from_user.id):
        help_text += "\n\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n/off - –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n/on - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['profile'])
@check_bot_active
def profile_command(message):
    user_data = get_user_data(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ—Ñ–∞—Ö
    active_buffs = get_active_buffs_info(message.from_user.id)
    buffs_text = "\n".join([
        f"üî• {buff['name']} (+{buff['bonus']}%) - –æ—Å—Ç–∞–ª–æ—Å—å {buff['remaining_time']}"
        for buff in active_buffs
    ]) if active_buffs else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤"
    
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {user_data['username']}\n\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–æ–∫: {user_data['deliveries']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['money']} —Ä—É–±.\n"
        f"‚≠êÔ∏è –û–ø—ã—Ç: {user_data['experience']}\n\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã:\n{buffs_text}"
    )
    bot.reply_to(message, profile_text)

@bot.message_handler(commands=['deliver'])
@check_bot_active
def deliver_command(message):
    can_deliver_now, time_remaining = can_deliver(message.from_user.id)
    
    if not can_deliver_now:
        if time_remaining:
            minutes = int(time_remaining.total_seconds() // 60)
            seconds = int(time_remaining.total_seconds() % 60)
            bot.reply_to(
                message,
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes}–º {seconds}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!"
            )
        else:
            bot.reply_to(message, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    base_earnings = 100  # –ë–∞–∑–æ–≤—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    original_earnings, buffed_earnings = update_user_data(
        message.from_user.id,
        deliveries=1,
        earnings=base_earnings
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if buffed_earnings > original_earnings:
        bonus = buffed_earnings - original_earnings
        delivery_text = (
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {original_earnings} —Ä—É–±.\n"
            f"üî• –ë–æ–Ω—É—Å: +{bonus} —Ä—É–±.\n"
            f"üíµ –ò—Ç–æ–≥–æ: {buffed_earnings} —Ä—É–±."
        )
    else:
        delivery_text = (
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {buffed_earnings} —Ä—É–±."
        )
    
    bot.reply_to(message, delivery_text)

@bot.message_handler(commands=['top'])
@check_bot_active
def top_command(message):
    top_users = get_top_users(5)
    
    if not top_users:
        bot.reply_to(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    top_text = "üèÜ –¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤:\n\n"
    for position, username, deliveries in top_users:
        if position == 1:
            emoji = "ü•á"
        elif position == 2:
            emoji = "ü•à"
        elif position == 3:
            emoji = "ü•â"
        else:
            emoji = "üë§"
        
        top_text += f"{emoji} {username}: {deliveries} –¥–æ—Å—Ç–∞–≤–æ–∫\n"
    
    bot.reply_to(message, top_text)

@bot.message_handler(commands=['shop'])
@check_bot_active
def shop_command(message):
    items_count = get_shop_items_count()
    if items_count == 0:
        bot.reply_to(message, "üè™ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        return
    
    shop_text = "üè™ –ú–∞–≥–∞–∑–∏–Ω –±–∞—Ñ—Ñ–æ–≤:\n\n"
    for i in range(items_count):
        item = get_shop_item(i)
        shop_text += (
            f"{i+1}. {item['name']}\n"
            f"üìù {item['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item['duration']} –º–∏–Ω.\n\n"
        )
    
    shop_text += "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy <–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞>"
    bot.reply_to(message, shop_text)

@bot.message_handler(commands=['buy'])
@check_bot_active
def buy_command(message):
    try:
        item_number = int(message.text.split()[1]) - 1
        success, result_message = purchase_buff(message.from_user.id, item_number)
        bot.reply_to(message, result_message)
    except (IndexError, ValueError):
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞>"
        )

@bot.message_handler(commands=['buffs'])
@check_bot_active
def buffs_command(message):
    active_buffs = get_active_buffs_info(message.from_user.id)
    
    if not active_buffs:
        bot.reply_to(message, "üî• –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤")
        return
    
    buffs_text = "üî• –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã:\n\n"
    for buff in active_buffs:
        buffs_text += (
            f"‚Ä¢ {buff['name']}\n"
            f"üìà –ë–æ–Ω—É—Å: +{buff['bonus']}%\n"
            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {buff['remaining_time']}\n\n"
        )
    
    bot.reply_to(message, buffs_text)

@bot.message_handler(commands=['off'])
def off_command(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    if set_bot_state(False):
        bot.reply_to(message, "üîí –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞.")

@bot.message_handler(commands=['on'])
def on_command(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    if set_bot_state(True):
        bot.reply_to(message, "üîì –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞.")

def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main() 