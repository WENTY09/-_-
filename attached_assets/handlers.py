"""
Telegram bot command handlers.
"""
import logging
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
import telebot
from telebot import types
from telegram_bot.user_data import (
    get_user_data, update_user_data, can_deliver, get_top_users,
    get_shop_item, purchase_buff, get_active_buffs_info,
    is_admin, is_admin_with_permission, get_admin_permissions,
    add_admin, remove_admin, update_admin_permissions,
    block_user, unblock_user, add_money, remove_money, give_buff,
    get_all_users, get_user_details, get_all_admins, prepare_broadcast,
    get_all_shop_items, add_shop_item, edit_shop_item, delete_shop_item,
    SHOP_ITEMS, ROLE_OWNER, ROLE_ADMIN
)
from telegram_bot.delivery_image import create_delivery_image

# Set up logging
logger = logging.getLogger(__name__)

def register_handlers(bot):
    """
    Registers all handlers for bot commands.
    
    Args:
        bot: The TeleBot instance
    """
    # Command handlers
    bot.register_message_handler(lambda msg: start_command(msg, bot), commands=['start'])
    bot.register_message_handler(lambda msg: raznos_command(msg, bot), commands=['raznos'])
    bot.register_message_handler(lambda msg: top_command(msg, bot), commands=['top'])
    bot.register_message_handler(lambda msg: profile_command(msg, bot), commands=['profile'])
    bot.register_message_handler(lambda msg: shop_command(msg, bot), commands=['magaz'])
    bot.register_message_handler(lambda msg: admin_command(msg, bot), commands=['admin'])
    
    # Handle text messages with menu buttons
    bot.register_message_handler(lambda msg: handle_text_button(msg, bot), content_types=['text'])
    
    # Callback query handlers
    @bot.callback_query_handler(func=lambda call: call.data.startswith('change_name'))
    def change_name_callback(call):
        """Handle the change_name callback."""
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        msg = bot.send_message(call.message.chat.id, 
                              "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è –∫—É—Ä—å–µ—Ä–∞ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(msg, lambda m: process_name_change(m, bot))
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('shop_'))
    def shop_callback(call):
        """Handle shop navigation and purchase callbacks."""
        bot.answer_callback_query(call.id)
        
        parts = call.data.split('_')
        action = parts[1]
        user_id = call.from_user.id
        
        if action == 'prev' or action == 'next':
            current_index = int(parts[2])
            new_index = current_index - 1 if action == 'prev' else current_index + 1
            show_shop_item(call.message.chat.id, user_id, new_index, call.message.message_id, bot)
        
        elif action == 'buy':
            item_index = int(parts[2])
            success, message = purchase_buff(user_id, item_index)
            
            if success:
                bot.edit_message_text(
                    f"‚úÖ {message}",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
                # Show user profile after purchase
                time.sleep(2)
                profile_command_internal(call.message, bot)
            else:
                bot.edit_message_text(
                    f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–∞—Ñ—Ñ.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=get_shop_nav_keyboard(item_index)
                )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
    def menu_callback(call):
        """Handle menu navigation callbacks."""
        bot.answer_callback_query(call.id)
        
        action = call.data.split('_')[1]
        
        if action == 'main':
            # Return to main menu
            start_command(call.message, bot)
        
    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def admin_callback(call):
        """Handle admin panel callbacks."""
        bot.answer_callback_query(call.id)
        
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        # Check if user is admin
        if not is_admin(user_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        parts = call.data.split('_')
        action = parts[1]
        
        # Handle different admin actions
        if action == 'users':
            # Show user list
            show_user_list(chat_id, user_id, bot)
        
        elif action == 'block':
            # Show block user menu
            show_block_menu(chat_id, user_id, bot)
        
        elif action == 'money':
            # Show money management menu
            show_money_menu(chat_id, user_id, bot)
        
        elif action == 'give_buff':
            # Show give buff menu
            show_give_buff_menu(chat_id, user_id, bot)
        
        elif action == 'items':
            # Show shop items management menu
            show_shop_items_menu(chat_id, user_id, bot)
        
        elif action == 'broadcast':
            # Show broadcast menu
            show_broadcast_menu(chat_id, user_id, bot)
        
        elif action == 'admins':
            # Show admin management menu
            show_admin_management(chat_id, user_id, bot)
        
        # Handle user interaction for specific admin actions
        elif action == 'block_user':
            target_id = int(parts[2])
            success, message = block_user(user_id, target_id)
            bot.send_message(chat_id, f"{'‚úÖ' if success else '‚ùå'} {message}")
            
        elif action == 'unblock_user':
            target_id = int(parts[2])
            success, message = unblock_user(user_id, target_id)
            bot.send_message(chat_id, f"{'‚úÖ' if success else '‚ùå'} {message}")
            
        elif action == 'user_info':
            target_id = int(parts[2])
            show_user_info(chat_id, user_id, target_id, bot)
            
        elif action == 'add_item':
            # Start creating a new shop item
            msg = bot.send_message(chat_id, 
                                  "üõí <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "<–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Ü–µ–Ω–∞> | <–±–æ–Ω—É—Å –≤ %> | <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω>\n\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                  "–ì–∏–ø–µ—Ä –ë–∞—Ñ—Ñ | –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –Ω–∞ 50% | 5000 | 50 | 40",
                                  parse_mode='HTML')
            bot.register_next_step_handler(msg, lambda m: process_add_item(m, user_id, bot))
        
        elif action == 'edit_item':
            # Start editing a shop item
            msg = bot.send_message(chat_id,
                                  "üõí <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "<ID —Ç–æ–≤–∞—Ä–∞> | <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Ü–µ–Ω–∞> | <–±–æ–Ω—É—Å –≤ %> | <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω>\n\n"
                                  "–õ—é–±–æ–µ –ø–æ–ª–µ, –∫—Ä–æ–º–µ ID, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º (|), —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –µ–≥–æ.\n\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                  "1 | –°—É–ø–µ—Ä –ë–∞—Ñ—Ñ | | 3000 | | 30",
                                  parse_mode='HTML')
            bot.register_next_step_handler(msg, lambda m: process_edit_item(m, user_id, bot))
        
        elif action == 'delete_item':
            # Start deleting a shop item
            msg = bot.send_message(chat_id,
                                  "üõí <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: 2",
                                  parse_mode='HTML')
            bot.register_next_step_handler(msg, lambda m: process_delete_item(m, user_id, bot))
        
        elif action == 'back':
            # Return to admin menu
            show_admin_menu(chat_id, user_id, bot)

def process_name_change(message, bot):
    """Process the name change request."""
    new_name = message.text.strip()
    
    if len(new_name) > 20:
        bot.reply_to(message, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # Update user data with new name
    user_data = get_user_data(message.from_user.id)
    user_data['username'] = new_name
    
    bot.reply_to(message, f"‚úÖ –ò–º—è –∫—É—Ä—å–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
    
    # Show updated profile
    profile_command_internal(message, bot)

def start_command(message, bot):
    """Handle the /start command."""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # Check if user is new
    is_new = user_data['deliveries'] == 0
    
    # Create main menu keyboard
    markup = create_main_menu_markup()
    
    if is_new:
        # Welcome message for new users
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å "
            f"–ª—É—á—à–∏–º –∫—É—Ä—å–µ—Ä–æ–º.\n\n"
            f"üì± <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>\n"
            f"‚Ä¢ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—É—Ä—å–µ—Ä–∞\n"
            f"‚Ä¢ –†–∞–∑–Ω–æ—Å –ø–æ—Å—ã–ª–æ–∫ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏\n"
            f"‚Ä¢ –ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∞—Ñ—Ñ–æ–≤ –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n"
            f"‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n"
            f"–ù–∞—á–Ω–∏ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ—Å—ã–ª–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>–†–∞–∑–Ω–æ—Å–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏</b>!",
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        # Welcome back message for existing users
        bot.send_message(
            message.chat.id,
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data['username']}!\n\n"
            f"üí∞ –£ —Ç–µ–±—è {user_data['money']} —Ä—É–±–ª–µ–π\n"
            f"üì¶ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {user_data['deliveries']} –¥–æ—Å—Ç–∞–≤–æ–∫\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    # Check if user is admin and show admin menu
    if is_admin(user_id):
        show_admin_menu(message.chat.id, user_id, bot)

def raznos_command(message, bot):
    """Handle the /raznos command."""
    user_id = message.from_user.id
    
    # Check if user can make a delivery (7-minute cooldown)
    can_do, remaining = can_deliver(user_id)
    
    if not can_do:
        if remaining:  # Check if remaining is not None
            minutes, seconds = divmod(remaining.seconds, 60)
            bot.reply_to(
                message,
                f"‚è± –í—ã –Ω–µ–¥–∞–≤–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–ª–∏ –ø–æ—Å—ã–ª–∫—É! –°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ "
                f"{minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
            )
        else:
            bot.reply_to(
                message,
                f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        return
    
    # Generate random delivery earnings (100-300)
    earnings = random.randint(100, 300)
    
    # Update user data (+1 delivery, +earnings money)
    original_earnings, buffed_earnings = update_user_data(user_id, 1, earnings)
    
    # Get buff multiplier if any
    buff_multiplier = buffed_earnings / original_earnings if original_earnings > 0 else 1
    
    # Generate and send delivery image
    delivery_image = create_delivery_image()
    
    # Send delivery completion message with image
    if buff_multiplier > 1:
        caption = (
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {original_earnings} —Ä—É–±. + {buffed_earnings - original_earnings} —Ä—É–±. (–±–æ–Ω—É—Å)\n"
            f"üíµ –ò—Ç–æ–≥–æ: {buffed_earnings} —Ä—É–±.\n\n"
            f"üìä –ê–∫—Ç–∏–≤–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{buff_multiplier:.2f}"
        )
    else:
        caption = (
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {buffed_earnings} —Ä—É–±."
        )
    
    # Check if we have a delivery image, if not, just send the message
    if delivery_image:
        with open(delivery_image, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=caption)
    else:
        bot.send_message(message.chat.id, caption)

def top_command(message, bot):
    """Handle the /top command."""
    top_users = get_top_users(10)  # Get top 10 users
    
    if not top_users:
        bot.send_message(message.chat.id, "üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏!")
        return
    
    # Create message with top users
    msg = "üèÜ <b>–¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤:</b>\n\n"
    
    for i, (user_id, username, deliveries) in enumerate(top_users):
        # Add medal emoji for top 3
        if i == 0:
            medal = "ü•á"
        elif i == 1:
            medal = "ü•à"
        elif i == 2:
            medal = "ü•â"
        else:
            medal = f"{i+1}."
        
        msg += f"{medal} <b>{username}</b> - {deliveries} –¥–æ—Å—Ç–∞–≤–æ–∫\n"
    
    bot.send_message(message.chat.id, msg, parse_mode='HTML')

def profile_command(message, bot):
    """Handle the /profile command."""
    profile_command_internal(message, bot)

def profile_command_internal(message, bot):
    """Internal implementation of profile command to be reused."""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # Get active buffs info
    active_buffs = get_active_buffs_info(user_id)
    buffs_text = ""
    
    if active_buffs:
        buffs_text = "\n\nüîÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã:</b>\n"
        for buff in active_buffs:
            buffs_text += f"‚Ä¢ {buff['name']} - –æ—Å—Ç–∞–ª–æ—Å—å {buff['remaining_time']}\n"
    
    # Create inline keyboard for changing name
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"change_name"))
    
    bot.send_message(
        message.chat.id,
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞</b>\n\n"
        f"üìù –ò–º—è: <b>{user_data['username']}</b>\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–æ–∫: <b>{user_data['deliveries']}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data['money']} —Ä—É–±.</b>"
        f"{buffs_text}",
        parse_mode='HTML',
        reply_markup=markup
    )

def shop_command(message, bot):
    """Handle the /magaz command to open the shop."""
    show_shop_item(message.chat.id, message.from_user.id, 0, None, bot)

def admin_command(message, bot):
    """Handle the /admin command."""
    user_id = message.from_user.id
    
    # Check if user is admin
    if is_admin(user_id):
        show_admin_menu(message.chat.id, user_id, bot)
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

def handle_text_button(message, bot):
    """Handle text messages from the keyboard."""
    text = message.text
    
    if text == "üì¶ –†–∞–∑–Ω–æ—Å–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏":
        raznos_command(message, bot)
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        profile_command(message, bot)
    elif text == "üèÜ –¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤":
        top_command(message, bot)
    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        shop_command(message, bot)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        info_command(message, bot)

def info_command(message, bot):
    """Show bot information."""
    bot.send_message(
        message.chat.id,
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫—É—Ä—å–µ—Ä–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–æ—Å—ã–ª–æ–∫.\n\n"
        f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"üì¶ /raznos –∏–ª–∏ '–†–∞–∑–Ω–æ—Å–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏' - –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å—ã–ª–æ–∫\n"
        f"üë§ /profile –∏–ª–∏ '–ü—Ä–æ—Ñ–∏–ª—å' - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"üèÜ /top –∏–ª–∏ '–¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤' - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        f"üõí /magaz –∏–ª–∏ '–ú–∞–≥–∞–∑–∏–Ω' - –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        f"‚Ä¢ –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏: 7 –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: 100-300 —Ä—É–±–ª–µ–π\n"
        f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç—å –±–∞—Ñ—Ñ—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞\n"
        f"‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å —Ç–æ–ø-10 –∫—É—Ä—å–µ—Ä–æ–≤\n\n"
        f"<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @white_wenty",
        parse_mode='HTML'
    )

def show_shop_item(chat_id, user_id, item_index, message_id, bot):
    """Display a shop item with navigation buttons."""
    item = get_shop_item(item_index)
    
    if not item:
        bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Get user data for showing current balance
    user_data = get_user_data(user_id)
    
    # Create shop item message
    msg = (
        f"üõí <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π</b> [{item_index + 1}/3]\n\n"
        f"üîÆ <b>{item['name']}</b>\n\n"
        f"üìù {item['description']}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item['duration']} –º–∏–Ω—É—Ç\n"
        f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n\n"
        f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['money']} —Ä—É–±."
    )
    
    # Create navigation keyboard
    keyboard = get_shop_nav_keyboard(item_index)
    
    # Send or edit message
    if message_id:
        bot.edit_message_text(
            msg, chat_id, message_id,
            parse_mode='HTML', reply_markup=keyboard
        )
    else:
        bot.send_message(
            chat_id, msg,
            parse_mode='HTML', reply_markup=keyboard
        )

def get_shop_nav_keyboard(item_index):
    """Get inline keyboard for shop navigation."""
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # Previous button (disabled for first item)
    prev_button = types.InlineKeyboardButton(
        "‚óÄÔ∏è", callback_data=f"shop_prev_{item_index}"
    ) if item_index > 0 else types.InlineKeyboardButton(
        "üö´", callback_data=f"shop_none"
    )
    
    # Buy button
    buy_button = types.InlineKeyboardButton(
        "üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"shop_buy_{item_index}"
    )
    
    # Next button (disabled for last item)
    next_button = types.InlineKeyboardButton(
        "‚ñ∂Ô∏è", callback_data=f"shop_next_{item_index}"
    ) if item_index < 2 else types.InlineKeyboardButton(
        "üö´", callback_data=f"shop_none"
    )
    
    keyboard.add(prev_button, buy_button, next_button)
    
    # Back to main menu button
    keyboard.add(types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"))
    
    return keyboard

# Main menu functions
def create_main_menu_markup():
    """Create the main menu keyboard markup."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # Add buttons with emojis
    markup.add(
        types.KeyboardButton("üì¶ –†–∞–∑–Ω–æ—Å–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏")
    )
    markup.add(
        types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("üèÜ –¢–æ–ø –∫—É—Ä—å–µ—Ä–æ–≤")
    )
    markup.add(
        types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"),
        types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    )
    
    return markup

# Admin panel functions
def show_admin_menu(chat_id, user_id, bot):
    """Show admin menu to user with admin rights."""
    permissions = get_admin_permissions(user_id)
    
    # Create admin menu with available options based on permissions
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if permissions.get("view_users", False):
        markup.add(types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users"))
    
    if permissions.get("block_users", False):
        markup.add(types.InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_block"))
    
    if permissions.get("add_money", False) or permissions.get("remove_money", False):
        markup.add(types.InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_money"))
    
    if permissions.get("give_items", False):
        markup.add(types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="admin_give_buff"))
    
    if permissions.get("manage_items", False):
        markup.add(types.InlineKeyboardButton("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_items"))
    
    if permissions.get("broadcast", False):
        markup.add(types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
    
    if permissions.get("manage_admins", False):
        markup.add(types.InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin_admins"))
    
    # Send admin menu
    bot.send_message(
        chat_id,
        "üîê <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

# Admin panel implementation functions
def show_user_list(chat_id, admin_id, bot, page=0, page_size=5):
    """Show a paginated list of all users."""
    if not is_admin_with_permission(admin_id, "view_users"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users = get_all_users()
    
    if not users:
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # Calculate pagination
    total_pages = (len(users) + page_size - 1) // page_size
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(users))
    
    # Create message with user list
    msg = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):\n\n"
    
    for i, user in enumerate(users[start_idx:end_idx], start=start_idx+1):
        status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get("blocked", False) else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        msg += (f"{i}. <b>{user['username']}</b> (ID: {user['user_id']})\n"
                f"   üí∞ {user['money']} —Ä—É–±. | üì¶ {user['deliveries']} –¥–æ—Å—Ç–∞–≤–æ–∫\n"
                f"   –°—Ç–∞—Ç—É—Å: {status}\n\n")
    
    # Create navigation keyboard
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # Previous button
    prev_button = types.InlineKeyboardButton(
        "‚óÄÔ∏è", callback_data=f"admin_users_page_{page-1}"
    ) if page > 0 else types.InlineKeyboardButton(
        "üö´", callback_data="admin_none"
    )
    
    # Home button
    home_button = types.InlineKeyboardButton("üè†", callback_data="admin_back")
    
    # Next button
    next_button = types.InlineKeyboardButton(
        "‚ñ∂Ô∏è", callback_data=f"admin_users_page_{page+1}"
    ) if page < total_pages - 1 else types.InlineKeyboardButton(
        "üö´", callback_data="admin_none"
    )
    
    keyboard.add(prev_button, home_button, next_button)
    
    # Add view user button
    keyboard.add(types.InlineKeyboardButton(
        "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_view_user"
    ))
    
    bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)

def show_user_info(chat_id, admin_id, user_id, bot):
    """Show detailed information about a user."""
    if not is_admin_with_permission(admin_id, "view_users"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return
    
    user_details = get_user_details(user_id)
    
    if not user_details:
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Format active buffs
    buffs_text = ""
    if user_details["active_buffs"]:
        buffs_text = "\n\nüîÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã:</b>\n"
        for buff in user_details["active_buffs"]:
            buffs_text += f"‚Ä¢ {buff['name']} - –æ—Å—Ç–∞–ª–æ—Å—å {buff['remaining_time']}\n"
    
    # Create message with user details
    msg = (f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
           f"ID: {user_details['user_id']}\n"
           f"–ò–º—è: <b>{user_details['username']}</b>\n"
           f"–î–æ—Å—Ç–∞–≤–æ–∫: <b>{user_details['deliveries']}</b>\n"
           f"–ë–∞–ª–∞–Ω—Å: <b>{user_details['money']} —Ä—É–±.</b>\n"
           f"–°—Ç–∞—Ç—É—Å: {'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user_details['blocked'] else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}\n"
           f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç–∞–≤–∫–∞: {user_details['last_delivery_time']}"
           f"{buffs_text}")
    
    # Create action keyboard
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # Add block/unblock button
    if user_details["blocked"]:
        keyboard.add(types.InlineKeyboardButton(
            "üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unblock_user_{user_id}"
        ))
    else:
        keyboard.add(types.InlineKeyboardButton(
            "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_block_user_{user_id}"
        ))
    
    # Add money management buttons
    keyboard.add(
        types.InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f"admin_add_money_{user_id}"),
        types.InlineKeyboardButton("üí∏ –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f"admin_remove_money_{user_id}")
    )
    
    # Add give buff button
    keyboard.add(types.InlineKeyboardButton(
        "üéÅ –í—ã–¥–∞—Ç—å –±–∞—Ñ—Ñ", callback_data=f"admin_give_buff_{user_id}"
    ))
    
    # Add back button
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users"))
    
    bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)

def show_block_menu(chat_id, admin_id, bot):
    """Show menu for blocking/unblocking users."""
    if not is_admin_with_permission(admin_id, "block_users"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # Create message and keyboard
    msg = (f"üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
           f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
           f"–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ: block <user_id>\n"
           f"–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ: unblock <user_id>\n\n"
           f"–ù–∞–ø—Ä–∏–º–µ—Ä: block 123456789")
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    # Send message
    msg = bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)
    
    # Register next step handler
    bot.register_next_step_handler(msg, lambda m: process_block_command(m, admin_id, bot))

def process_block_command(message, admin_id, bot):
    """Process block/unblock command."""
    text = message.text.strip().split()
    
    if len(text) != 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: block 123456789")
        return
    
    command, user_id_str = text
    
    try:
        user_id = int(user_id_str)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if command.lower() == "block":
        success, message_text = block_user(admin_id, user_id)
    elif command.lower() == "unblock":
        success, message_text = unblock_user(admin_id, user_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ block –∏–ª–∏ unblock.")
        return
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")

def show_money_menu(chat_id, admin_id, bot):
    """Show menu for adding/removing money."""
    if not (is_admin_with_permission(admin_id, "add_money") or
            is_admin_with_permission(admin_id, "remove_money")):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏.")
        return
    
    # Create message and keyboard
    msg = (f"üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏</b>\n\n"
           f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n"
           f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: add <user_id> <amount>\n"
           f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: remove <user_id> <amount>\n\n"
           f"–ù–∞–ø—Ä–∏–º–µ—Ä: add 123456789 1000")
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    # Send message
    msg = bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)
    
    # Register next step handler
    bot.register_next_step_handler(msg, lambda m: process_money_command(m, admin_id, bot))

def process_money_command(message, admin_id, bot):
    """Process add/remove money command."""
    text = message.text.strip().split()
    
    if len(text) != 3:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: add 123456789 1000")
        return
    
    command, user_id_str, amount_str = text
    
    try:
        user_id = int(user_id_str)
        amount = int(amount_str)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    if command.lower() == "add":
        if not is_admin_with_permission(admin_id, "add_money"):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥.")
            return
        success, message_text = add_money(admin_id, user_id, amount)
    elif command.lower() == "remove":
        if not is_admin_with_permission(admin_id, "remove_money"):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥.")
            return
        success, message_text = remove_money(admin_id, user_id, amount)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ remove.")
        return
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")

def show_give_buff_menu(chat_id, admin_id, bot):
    """Show menu for giving buffs to users."""
    if not is_admin_with_permission(admin_id, "give_items"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    
    # Create message with available buffs
    msg = (f"üéÅ <b>–í—ã–¥–∞—á–∞ –±–∞—Ñ—Ñ–æ–≤</b>\n\n"
           f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞—Ñ—Ñ—ã:\n")
    
    for item in SHOP_ITEMS:
        msg += f"{item['id']}. {item['name']} (+{int(item['bonus']*100)}%, {item['duration']} –º–∏–Ω.)\n"
    
    msg += (f"\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –±–∞—Ñ—Ñ–∞ –¥–ª—è –≤—ã–¥–∞—á–∏.\n"
            f"–§–æ—Ä–º–∞—Ç: <user_id> <buff_id>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 0")
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    # Send message
    msg = bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)
    
    # Register next step handler
    bot.register_next_step_handler(msg, lambda m: process_give_buff(m, admin_id, bot))

def process_give_buff(message, admin_id, bot):
    """Process give buff command."""
    text = message.text.strip().split()
    
    if len(text) != 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: 123456789 0")
        return
    
    user_id_str, buff_id_str = text
    
    try:
        user_id = int(user_id_str)
        buff_id = int(buff_id_str)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –±–∞—Ñ—Ñ–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    success, message_text = give_buff(admin_id, user_id, buff_id)
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")

def show_broadcast_menu(chat_id, admin_id, bot):
    """Show menu for sending broadcast messages."""
    if not is_admin_with_permission(admin_id, "broadcast"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    # Create message and keyboard
    msg = (f"üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
           f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n"
           f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É.\n\n"
           f"–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –°–µ–≥–æ–¥–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ <b>—Å–∫–∏–¥–∫–∏</b>!")
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    # Send message
    msg = bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)
    
    # Register next step handler
    bot.register_next_step_handler(msg, lambda m: process_broadcast(m, admin_id, bot))

def process_broadcast(message, admin_id, bot):
    """Process broadcast message."""
    text = message.text.strip()
    
    if not text:
        bot.send_message(message.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    success, message_text, user_ids = prepare_broadcast(admin_id, text)
    
    if not success:
        bot.send_message(message.chat.id, f"‚ùå {message_text}")
        return
    
    # Confirm broadcast
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_broadcast"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")
    )
    
    bot.send_message(
        message.chat.id,
        f"üì£ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{text}\n\n{message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    # Store broadcast data in user_data
    user_data = get_user_data(admin_id)
    user_data["_broadcast_data"] = {
        "text": text,
        "user_ids": user_ids
    }
    
def process_add_item(message, admin_id, bot):
    """Process adding a new shop item."""
    if not is_admin_with_permission(admin_id, "manage_items"):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return
    
    text = message.text.strip()
    parts = [part.strip() for part in text.split('|')]
    
    if len(parts) != 5:
        bot.send_message(message.chat.id, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Ü–µ–Ω–∞> | <–±–æ–Ω—É—Å –≤ %> | <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å>")
        return
    
    name, description, price_str, bonus_str, duration_str = parts
    
    try:
        price = int(price_str)
        bonus = float(bonus_str) / 100  # Convert percentage to decimal
        duration = int(duration_str)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞, –±–æ–Ω—É—Å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    success, message_text = add_shop_item(admin_id, name, description, price, bonus, duration)
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")
    if success:
        # Show shop items menu again
        show_shop_items_menu(message.chat.id, admin_id, bot)

def process_edit_item(message, admin_id, bot):
    """Process editing a shop item."""
    if not is_admin_with_permission(admin_id, "manage_items"):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return
    
    text = message.text.strip()
    parts = [part.strip() for part in text.split('|')]
    
    if len(parts) != 6:
        bot.send_message(message.chat.id, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <ID> | <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Ü–µ–Ω–∞> | <–±–æ–Ω—É—Å –≤ %> | <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å>")
        return
    
    item_id_str, name, description, price_str, bonus_str, duration_str = parts
    
    try:
        item_id = int(item_id_str)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # Convert empty strings to None to keep current values
    name = None if not name else name
    description = None if not description else description
    
    # Parse numeric values
    try:
        price = int(price_str) if price_str else None
        bonus = float(bonus_str) / 100 if bonus_str else None  # Convert percentage to decimal
        duration = int(duration_str) if duration_str else None
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞, –±–æ–Ω—É—Å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    success, message_text = edit_shop_item(
        admin_id, item_id, name, description, price, bonus, duration
    )
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")
    if success:
        # Show shop items menu again
        show_shop_items_menu(message.chat.id, admin_id, bot)

def process_delete_item(message, admin_id, bot):
    """Process deleting a shop item."""
    if not is_admin_with_permission(admin_id, "manage_items"):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return
    
    text = message.text.strip()
    
    try:
        item_id = int(text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    success, message_text = delete_shop_item(admin_id, item_id)
    
    bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")
    if success:
        # Show shop items menu again
        show_shop_items_menu(message.chat.id, admin_id, bot)

def process_admin_command(message, admin_id, bot):
    """Process admin management command."""
    text = message.text.strip().split(maxsplit=2)
    
    if len(text) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    command = text[0].lower()
    
    if command == "add":
        # Add admin
        if len(text) < 3:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: add 123456789 –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            return
        
        try:
            user_id = int(text[1])
            name = text[2]
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        success, message_text = add_admin(admin_id, user_id, name)
        bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")
        
    elif command == "remove":
        # Remove admin
        try:
            user_id = int(text[1])
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        success, message_text = remove_admin(admin_id, user_id)
        bot.send_message(message.chat.id, f"{'‚úÖ' if success else '‚ùå'} {message_text}")
        
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ remove.")
        return
    
def show_shop_items_menu(chat_id, admin_id, bot):
    """Show menu for shop items management."""
    if not is_admin_with_permission(admin_id, "manage_items"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return
    
    # Get all shop items
    shop_items = get_all_shop_items()
    
    # Create message with shop items list
    msg = f"üõí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
    
    if shop_items:
        for i, item in enumerate(shop_items):
            msg += (f"ID: {item['id']}, <b>{item['name']}</b>\n"
                   f"üìù {item['description']}\n"
                   f"üí∞ –¶–µ–Ω–∞: {item['price']} —Ä—É–±.\n"
                   f"üìà –ë–æ–Ω—É—Å: +{int(item['bonus']*100)}%\n"
                   f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item['duration']} –º–∏–Ω.\n"
                   f"üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if item.get('is_active', True) else '‚ùå'}\n\n")
    else:
        msg += "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    # Create keyboard with options
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_item"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_edit_item"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete_item"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    
    # Send message
    bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)

def show_admin_management(chat_id, admin_id, bot):
    """Show admin management menu."""
    if not is_admin_with_permission(admin_id, "manage_admins"):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
        return
    
    # Get list of admins
    admins = get_all_admins()
    
    # Create message with admin list
    msg = f"üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
    
    if admins:
        msg += "<b>–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
        for i, admin in enumerate(admins, start=1):
            role_emoji = "üëë" if admin["role"] == ROLE_OWNER else "üõ°Ô∏è"
            msg += f"{i}. {role_emoji} <b>{admin['name']}</b> (ID: {admin['user_id']})\n"
            
            # List permissions
            permissions = admin["permissions"]
            enabled_permissions = [k for k, v in permissions.items() if v]
            
            if enabled_permissions:
                msg += "   –ü—Ä–∞–≤–∞: " + ", ".join(enabled_permissions) + "\n"
            
            msg += "\n"
    else:
        msg += "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
    
    msg += (f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
            f"add <user_id> <name>\n\n"
            f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
            f"remove <user_id>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: add 123456789 –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    # Send message
    msg = bot.send_message(chat_id, msg, parse_mode='HTML', reply_markup=keyboard)
    
    # Register next step handler
    bot.register_next_step_handler(msg, lambda m: process_admin_command(m, admin_id, bot))